import Head from "next/head";
import { io, Socket } from "socket.io-client";
import { useEffect, useState } from "react";
import { encrypt_message, decrypt_message } from "@/ClientEncrypt";

const socket: Socket = io(process.env.NEXT_PUBLIC_IP);

export default function Home() {
  const [message, setMessage] = useState("");
  const [encryptedMessageReceived, setEncryptedMessageReceived] = useState("");
  const [messageReceived, setMessageReceived] = useState("");

  const sendMessage = async () => {
    const encrypted = encrypt_message(message);
    console.log(
      "1st encryption on the client, sending to server: " + encrypted
    );
    // send a post request to the server
    const res = await fetch("/api/encrypt", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ message: encrypted }),
    });
    const data = await res.json();
    // @ts-ignore
    console.log("2nd encryption received from the server: " + data.message);
    // @ts-ignore
    socket.emit("send_message", { message: data.message });
    setMessage("");
  };

  // const sendMessage = () => {
  // encryptMessage();
  // console.log(encryptedMessage, "encrypted message");
  // socket.emit("send_message", { message: encryptedMessage });
  // setMessage("");

  // socket.emit("send_message", { message: encrypt_message(message) });
  // setMessage("");
  // console.log("unencrypted message (unencrypted): " + message);
  // setEncryptedMessage(encrypt_message(message));
  // console.log("encrypted message 1 (encrypted): " + encryptedMessage);
  // const encrypted = encrypt_message(message);
  // console.log(
  //   "1st encryption on the client, sending to server: " + encrypted
  // );
  // // send a post request to the server
  // fetch("/api/encrypt", {
  //   method: "POST",
  //   headers: {
  //     "Content-Type": "application/json",
  //   },
  //   body: JSON.stringify({ message: encrypted }),
  // }).then((res) => {
  //   res
  //     .json()
  //     .then(
  //       (data) => (
  //         setEncryptedMessage(data.message),
  //         console.log(
  //           "2nd encryption received from the server: " + data.message
  //         )
  //       )
  //     );
  // });
  // socket.emit("send_message", { message: encryptedMessage });
  // setMessage("");
  // };

  // console.log("Sending encrypted to the socket server: " + encryptedMessage);

  // useEffect(() => {
  //   socket.emit("send_message", { message: encryptedMessage });
  //   setMessage("");
  //   console.log("is this working?");
  // }, [encryptedMessage]);

  useEffect(() => {
    socket.on("receive_message", (data) => {
      // const decrypted = decrypt_message(data.message);
      setEncryptedMessageReceived(data.message);
    });
  }, [socket]);

  useEffect(() => {
    if (encryptedMessageReceived) {
      console.log(encryptedMessageReceived, "encrypted message received");
      // const decrypted = decrypt_message(encryptedMessageReceived);
      // setMessageReceived(decrypted);
      decryptMessage();
    }
  }, [encryptedMessageReceived]);

  const decryptMessage = async () => {
    const res = await fetch("/api/decrypt", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ message: encryptedMessageReceived }),
    });
    const data = await res.json();
    // @ts-ignore
    console.log("decrypted message received from the server: " + data.message);

    console.log(
      // @ts-ignore
      "decrypted message on the client: " + decrypt_message(data.message)
    );
    // @ts-ignore
    setMessageReceived(decrypt_message(data.message));
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <input
          placeholder="Message..."
          onChange={(event) => {
            setMessage(event.target.value);
          }}
          value={message}
        />
        <button onClick={sendMessage}>Send Message</button>
        <h1>Message:</h1>
        {messageReceived}
      </div>
    </>
  );
}
